From 45069956c21fa40a55dd443b0ad07bf48f7fe04e Mon Sep 17 00:00:00 2001
From: Luyao Zhong <luyao.zhong@intel.com>
Date: Fri, 11 Jun 2021 05:32:34 -0400
Subject: [PATCH 3/3] memory tiering polishing

---
 ...413_secondary_memory_mb_to_comput_nodes.py | 32 +++++++++++++++++++
 nova/virt/libvirt/driver.py                   | 15 +++++----
 2 files changed, 41 insertions(+), 6 deletions(-)
 create mode 100644 nova/db/sqlalchemy/migrate_repo/versions/413_secondary_memory_mb_to_comput_nodes.py

diff --git a/nova/db/sqlalchemy/migrate_repo/versions/413_secondary_memory_mb_to_comput_nodes.py b/nova/db/sqlalchemy/migrate_repo/versions/413_secondary_memory_mb_to_comput_nodes.py
new file mode 100644
index 0000000000..0e72a2ee45
--- /dev/null
+++ b/nova/db/sqlalchemy/migrate_repo/versions/413_secondary_memory_mb_to_comput_nodes.py
@@ -0,0 +1,32 @@
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+
+# This is a placeholder for backports.
+# Do not use this number for new work.  New work starts after
+# all the placeholders.
+#
+# See this for more information:
+# http://lists.openstack.org/pipermail/openstack-dev/2013-March/006827.html
+
+from sqlalchemy import MetaData, Table, Column, Integer
+
+
+def upgrade(migrate_engine):
+    meta = MetaData(bind=migrate_engine)
+
+    for prefix in ('', 'shadow_'):
+        compute_nodes = Table('%scompute_nodes' % prefix, meta, autoload=True)
+        for column_name in ['secondary_memory_mb', 'secondary_memory_mb_used']:
+            column = Column(column_name, Integer,
+                            default=0, nullable=True)
+            if not hasattr(compute_nodes.c, column_name):
+                compute_nodes.create_column(column)
diff --git a/nova/virt/libvirt/driver.py b/nova/virt/libvirt/driver.py
index a2de12f891..cc38b3a085 100644
--- a/nova/virt/libvirt/driver.py
+++ b/nova/virt/libvirt/driver.py
@@ -5020,7 +5020,7 @@ class LibvirtDriver(driver.ComputeDriver):
         """Return config object of LibvirtConfigGuestMemoryTune"""
         memtune = vconfig.LibvirtConfigGuestMemoryTune()
         toplimit = hardware.get_memtier_toplimit(flavor)
-        if toplimit < 0:
+        if toplimit <= 0:
             return None
         memtune.toptier_limit = toplimit
         return memtune
@@ -5125,15 +5125,16 @@ class LibvirtDriver(driver.ComputeDriver):
             if memtier_toplimit < 0:
                 designer.set_numa_memnode(tnode, guest_node_id, [host_cell.id])
                 guest_numa_tune.memory.nodeset.append(host_cell.id)
+                guest_numa_tune.memnodes.append(tnode)
             else:
                 second_tier = self.memory_affinities[host_cell.id]
                 guest_numa_tune.memory.nodeset.extend([host_cell.id, second_tier])
                 if memtier_toplimit == 0:
                     designer.set_numa_memnode(tnode, guest_node_id, [second_tier])
-                else:
-                    designer.set_numa_memnode(tnode, guest_node_id,
-                                              [host_cell.id, second_tier])
-            guest_numa_tune.memnodes.append(tnode)
+                    guest_numa_tune.memnodes.append(tnode)
+                #else:
+                #    designer.set_numa_memnode(tnode, guest_node_id,
+                #                              [host_cell.id, second_tier])
 
             # set CPUTune for the cell
             object_numa_cell = instance_numa_topology.cells[guest_node_id]
@@ -7471,6 +7472,8 @@ class LibvirtDriver(driver.ComputeDriver):
                     if second_tier_cell.id == second_tier:
                         cell.memory = cell.memory + second_tier_cell.memory
                         secondary_memory = second_tier_cell.memory
+                        # presume there is only 4KiB pages, workround for PoC
+                        mempages[0].total += second_tier_cell.mempages[0].total
                         break
             else:
                 secondary_memory = 0
@@ -7636,7 +7639,7 @@ class LibvirtDriver(driver.ComputeDriver):
                 'min_unit': 1,
                 'max_unit': self.secondary_memory_mb,
                 'step_size': 1,
-                'allocation_ratio': 1,
+                'allocation_ratio': 1.5,
                 'reserved': 0,
             }
 
-- 
2.25.4

